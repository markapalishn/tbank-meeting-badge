// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const logger = {
    info: (...args) => console.log('[INFO]', ...args),
    warn: (...args) => console.warn('[WARN]', ...args),
    error: (...args) => console.error('[ERROR]', ...args),
    debug: (...args) => {
        if (window.CONFIG?.DEBUG) {
            console.log('[DEBUG]', ...args);
        }
    },
    verbose: (...args) => {
        if (window.CONFIG?.VERBOSE_LOGGING) {
            console.log('[VERBOSE]', ...args);
        }
    }
};

class MeetingTimer {
    constructor() {
        this.currentMeeting = null;
        this.nextMeeting = null;
        this.isConnected = false;
        this.updateInterval = null;
        
        this.initializeElements();
        this.startTimer();
        this.loadMeetings();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ —Å—Ä–∞–∑—É
        this.updateEmployeeInfo();
    }
    
    initializeElements() {
        this.elements = {
            currentTimer: document.getElementById('currentTimer'),
            nextCountdown: document.getElementById('nextCountdown'),
            meetingTitle: document.querySelector('.meeting-title'),
            employeeInfo: document.getElementById('employeeInfo'),
            positionBadge: document.getElementById('positionBadge'),
            nameBadge: document.getElementById('nameBadge'),
            responsibilityAreas: document.getElementById('responsibilityAreas')
        };
    }
    
    hideBadge() {
        // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        this.hideLoader();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç
        document.getElementById('meetingBadge').style.display = 'none';
        document.getElementById('companyLogo').style.display = 'flex';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –≤—Å–µ–≥–¥–∞
        this.elements.employeeInfo.style.display = 'flex';
        this.elements.responsibilityAreas.style.display = 'block';
        logger.info('–ù–µ—Ç –≤—Å—Ç—Ä–µ—á - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ');
    }
    
    showBadge() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å—Ç—Ä–µ—á–∞—Ö
        document.getElementById('meetingBadge').style.display = 'flex';
        document.getElementById('companyLogo').style.display = 'none';
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        this.elements.employeeInfo.style.display = 'flex';
        this.elements.responsibilityAreas.style.display = 'block';
        logger.info('–ï—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂');
    }
    
    async loadMeetings() {
        try {
            this.showLoader();
            const calendarUrl = this.getGoogleCalendarUrl();
            await this.loadFromPublicCalendar(calendarUrl);
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å—Ç—Ä–µ—á:', error);
            this.hideBadge();
        }
    }
    
    getGoogleCalendarUrl() {
        return window.CONFIG.CALENDAR_URL;
    }
    
    async fetchWithProxy(url) {
        const proxies = window.CONFIG.PROXY_URLS || [];
        const timeout = window.CONFIG.PROXY_TIMEOUT || 10000;

        const resolveProxyUrl = (template, rawUrl) => {
            if (!template) return '';
            return template
                .replaceAll('{ENCODED_URL}', encodeURIComponent(rawUrl))
                .replaceAll('{URL}', rawUrl);
        };
        
        if (!Array.isArray(proxies) || proxies.length === 0) {
            throw new Error('–°–ø–∏—Å–æ–∫ proxy –ø—É—Å—Ç. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CONFIG.PROXY_URLS –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ DIRECT_CALENDAR_ENDPOINT.');
        }
        
        for (let i = 0; i < proxies.length; i++) {
            const proxyTemplate = proxies[i];
            const proxyUrl = resolveProxyUrl(proxyTemplate, url);
            try {
                logger.info(`üîÑ –ü—Ä–æ–±—É–µ–º proxy ${i + 1}/${proxies.length}:`, proxyUrl);
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), timeout);
                const response = await fetch(proxyUrl, { signal: controller.signal });
                clearTimeout(timeoutId);
                if (response.ok) {
                    logger.info(`‚úÖ Proxy ${i + 1} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª –¥–∞–Ω–Ω—ã–µ`);
                    return response;
                }
            } catch (error) {
                logger.warn(`‚ùå Proxy ${i + 1} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
                if (i === proxies.length - 1) {
                    throw new Error(`–í—Å–µ proxy —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`);
                }
            }
        }
        
        throw new Error('–ù–∏ –æ–¥–∏–Ω proxy –Ω–µ –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (response.ok=false).');
    }
    
    async loadFromPublicCalendar(calendarUrl) {
        try {
            logger.info('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞ Google Calendar
            let urlWithCacheBuster = calendarUrl;
            if (calendarUrl.includes('calendar.google.com')) {
                const separator = calendarUrl.includes('?') ? '&' : '?';
                urlWithCacheBuster = `${calendarUrl}${separator}_t=${Date.now()}&_v=${Math.random()}`;
                logger.info('üîÑ –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞:', urlWithCacheBuster);
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º proxy –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Google Calendar
            const startTime = Date.now();
            let response;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ Google Calendar URL
            logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', urlWithCacheBuster);
            if (urlWithCacheBuster.includes('calendar.google.com')) {
                // –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
                if (window.CONFIG?.DIRECT_CALENDAR_ENDPOINT) {
                    try {
                        logger.info('üîß –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç...');
                        const controller = new AbortController();
                        const timeoutId = setTimeout(() => controller.abort(), window.CONFIG.DIRECT_REQUEST_TIMEOUT || 8000);
                        const directUrl = `${window.CONFIG.DIRECT_CALENDAR_ENDPOINT}${encodeURIComponent(urlWithCacheBuster)}`;
                        response = await fetch(directUrl, { signal: controller.signal });
                        clearTimeout(timeoutId);
                    } catch (directErr) {
                        logger.warn('‚ùå –ü—Ä—è–º–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, fallback –Ω–∞ proxy:', directErr.message);
                    }
                }

                if (!response || !response.ok) {
                    logger.info('üîß –û–ë–•–û–î CORS: –ò—Å–ø–æ–ª—å–∑—É–µ–º proxy –¥–ª—è Google Calendar...');
                    response = await this.fetchWithProxy(urlWithCacheBuster);
                }
            } else {
                logger.info('üîß –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ-Google –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
                // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try {
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), window.CONFIG?.DIRECT_REQUEST_TIMEOUT || 8000);
                    response = await fetch(calendarUrl, { signal: controller.signal });
                    clearTimeout(timeoutId);
                } catch (corsError) {
                    logger.debug('CORS –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º proxy...');
                    response = await this.fetchWithProxy(calendarUrl);
                }
            }
            
            const loadTime = Date.now() - startTime;
            logger.debug(`–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${loadTime}ms`);
            
            if (!response) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∏ –æ—Ç –ø—Ä—è–º–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞, –Ω–∏ –æ—Ç proxy.');
            }
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const icalData = await response.text();
            logger.info('‚úÖ iCal –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä:', icalData.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            logger.debug('–ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:', icalData.substring(0, 200));
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Å –¥–æ–ø. –∑–∞—â–∏—Ç–æ–π)
            const isHtmlLike = /<\s*html[\s>]/i.test(icalData);
            if (!icalData.includes('BEGIN:VCALENDAR') && (isHtmlLike || icalData.includes('Error 404'))) {
                logger.error('–ü–æ–ª—É—á–µ–Ω–∞ HTML –æ—à–∏–±–∫–∞ –≤–º–µ—Å—Ç–æ iCal –¥–∞–Ω–Ω—ã—Ö. –ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
                logger.error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', icalData.substring(0, 500));
                this.hideBadge();
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–µ iCal –¥–∞–Ω–Ω—ã–µ
            if (!icalData.includes('BEGIN:VCALENDAR')) {
                logger.error('–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ iCal –¥–∞–Ω–Ω—ã–µ. –û–∂–∏–¥–∞–µ—Ç—Å—è BEGIN:VCALENDAR');
                logger.error('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):', icalData.substring(0, 500));
                this.hideBadge();
                return;
            }
            
            logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç BEGIN:VCALENDAR - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–µ iCal –¥–∞–Ω–Ω—ã–µ');
            
            logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç HTML –æ—à–∏–±–æ–∫ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
            
            const events = this.parseICalData(icalData);
            logger.info('üìÖ –°–æ–±—ã—Ç–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:', events.length);
            
            this.processCalendarEvents(events);
            
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
            this.hideBadge();
        }
    }
    
    parseICalData(icalData) {
        const events = [];
        const lines = icalData.split('\n');
        let currentEvent = null;
        
        logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ iCal –¥–∞–Ω–Ω—ã—Ö, —Å—Ç—Ä–æ–∫:', lines.length);
        
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            
            if (line === 'BEGIN:VEVENT') {
                currentEvent = {};
                logger.debug('–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ');
            } else if (line === 'END:VEVENT' && currentEvent) {
                // –ï—Å–ª–∏ –Ω–µ—Ç SUMMARY, —Å–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (!currentEvent.summary) {
                    currentEvent.summary = '–í—Å—Ç—Ä–µ—á–∞';
                    logger.info('üìù –°–æ–∑–¥–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "–í—Å—Ç—Ä–µ—á–∞"');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                const hasSummary = !!currentEvent.summary;
                const hasStart = !!currentEvent.start;
                const hasEnd = !!currentEvent.end;
                
                if (hasSummary && hasStart && hasEnd) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è
                    if (currentEvent.rrule) {
                        const recurringEvents = this.generateRecurringEvents(currentEvent);
                        events.push(...recurringEvents);
                        logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${recurringEvents.length} –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π –¥–ª—è "${currentEvent.summary}"`);
                    } else {
                        // –û–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                        events.push({
                            summary: currentEvent.summary,
                            start: currentEvent.start,
                            end: currentEvent.end
                        });
                        logger.info('‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:', {
                            summary: currentEvent.summary,
                            start: currentEvent.start,
                            end: currentEvent.end
                        });
                    }
                } else {
                    logger.warn('‚ùå –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ - –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
                        missing: {
                            summary: !hasSummary,
                            start: !hasStart,
                            end: !hasEnd
                        },
                        event: currentEvent
                    });
                }
                currentEvent = null;
            } else if (currentEvent) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, DTSTART;TZID=Europe/Moscow:20250922T104500)
                const colonIndex = line.indexOf(':');
                if (colonIndex === -1) continue;
                
                const keyPart = line.substring(0, colonIndex);
                const value = line.substring(colonIndex + 1);
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –∫–ª—é—á–∞ (–¥–æ –ø–µ—Ä–≤–æ–≥–æ ;)
                const key = keyPart.split(';')[0];
                
                switch (key) {
                    case 'SUMMARY':
                        currentEvent.summary = value;
                        logger.verbose('üìù –ù–∞–π–¥–µ–Ω SUMMARY:', value);
                        break;
                    case 'TITLE':
                        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
                        if (!currentEvent.summary) {
                            currentEvent.summary = value;
                            logger.verbose('üìù –ù–∞–π–¥–µ–Ω TITLE (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ SUMMARY):', value);
                        }
                        break;
                    case 'DTSTART':
                        currentEvent.start = this.parseICalDate(line); // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        break;
                    case 'DTEND':
                        currentEvent.end = this.parseICalDate(line); // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                        break;
                    case 'DESCRIPTION':
                        currentEvent.description = value;
                        break;
                case 'RRULE':
                    currentEvent.rrule = value;
                    logger.verbose('üîÑ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:', value);
                    break;
                }
            }
        }
        
        return events;
    }
    
    generateRecurringEvents(event) {
        const events = [];
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞—Ç
        const isValidDate = (d) => d instanceof Date && !isNaN(d.getTime());
        if (!isValidDate(event.start) || !isValidDate(event.end)) {
            logger.warn('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—ã –≤ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è RRULE, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', {
                summary: event.summary,
                start: event.start,
                end: event.end
            });
            return events;
        }
        if (event.end.getTime() <= event.start.getTime()) {
            logger.warn('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (end <= start) –≤ —Å–æ–±—ã—Ç–∏–∏ –¥–ª—è RRULE, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', {
                summary: event.summary,
                start: event.start.toISOString(),
                end: event.end.toISOString()
            });
            return events;
        }

        // –û–∫–Ω–æ —Ä–∞–∑–≤—ë—Ä—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–¥–Ω–µ–π)
        const rawWindow = window.CONFIG?.RECURRENCE_WINDOW_DAYS;
        const windowDays = Number.isInteger(rawWindow) && rawWindow > 0 ? rawWindow : 7;
        const endDate = new Date(today.getTime() + windowDays * 24 * 60 * 60 * 1000);
        
        logger.info('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è:', event.summary, '–û–∫–Ω–æ (–¥–Ω–µ–π):', windowDays);
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ BYDAY
        const rrule = this.parseRRULE(event.rrule);
        if (!rrule || !rrule.byday) {
            logger.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å RRULE –∏–ª–∏ –Ω–µ—Ç BYDAY:', event.rrule);
            return events;
        }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏–∑ iCal —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —á–∏—Å–ª–∞
        const dayMap = { 'MO': 1, 'TU': 2, 'WE': 3, 'TH': 4, 'FR': 5, 'SA': 6, 'SU': 0 };
        const allowedDays = rrule.byday.map(day => dayMap[day]).filter(day => day !== undefined);
        
        logger.info('üîÑ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:', allowedDays);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –æ–∫–Ω–æ
        for (let i = 0; i < windowDays; i++) {
            const currentDate = new Date(today.getTime() + i * 24 * 60 * 60 * 1000);
            const dayOfWeek = currentDate.getDay();
            
            if (allowedDays.includes(dayOfWeek)) {
                // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                const eventStart = new Date(currentDate);
                eventStart.setHours(event.start.getHours());
                eventStart.setMinutes(event.start.getMinutes());
                eventStart.setSeconds(event.start.getSeconds());
                
                const duration = event.end.getTime() - event.start.getTime();
                const eventEnd = new Date(eventStart.getTime() + duration);
                
                // –î–æ–ø. –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if (!isValidDate(eventStart) || !isValidDate(eventEnd) || eventEnd.getTime() <= eventStart.getTime()) {
                    logger.warn('‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑-–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞—Ç:', {
                        summary: event.summary,
                        start: eventStart,
                        end: eventEnd
                    });
                    continue;
                }

                events.push({
                    summary: event.summary,
                    start: eventStart,
                    end: eventEnd
                });
                
                logger.info('‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', {
                    summary: event.summary,
                    start: eventStart.toLocaleString(),
                    end: eventEnd.toLocaleString()
                });
            }
        }
        
        logger.info(`üîÑ –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${events.length} –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–æ–±—ã—Ç–∏–π`);
        return events;
    }
    
    parseRRULE(rruleString) {
        const rule = {};
        const parts = rruleString.split(';');
        
        for (const part of parts) {
            const [key, value] = part.split('=');
            switch (key) {
                case 'FREQ':
                    rule.freq = value;
                    break;
                case 'BYDAY':
                    rule.byday = value.split(',');
                    break;
                case 'INTERVAL':
                    rule.interval = parseInt(value) || 1;
                    break;
                case 'COUNT':
                    rule.count = parseInt(value);
                    break;
                case 'UNTIL':
                    rule.until = new Date(value);
                    break;
            }
        }
        
        return rule;
    }
    
    parseICalDate(dateString) {
        logger.verbose('üìÖ –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É:', dateString);
        
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ iCal
        if (dateString.includes('TZID=Europe/Moscow:')) {
            // –§–æ—Ä–º–∞—Ç —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º: DTSTART;TZID=Europe/Moscow:20250922T104500
            const datePart = dateString.split('TZID=Europe/Moscow:')[1];
            const year = datePart.substring(0, 4);
            const month = datePart.substring(4, 6);
            const day = datePart.substring(6, 8);
            const hour = datePart.substring(9, 11);
            const minute = datePart.substring(11, 13);
            const second = datePart.substring(13, 15);
            
            const dateStr = `${year}-${month}-${day}T${hour}:${minute}:${second}+03:00`;
            logger.verbose('üìÖ –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É (Moscow):', dateStr);
            const result = new Date(dateStr);
            logger.verbose('üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (Moscow):', result, 'Valid:', !isNaN(result.getTime()));
            return result;
        } else if (dateString.endsWith('Z')) {
            // –§–æ—Ä–º–∞—Ç UTC: DTSTART:20250921T180000Z
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
            const colonIndex = dateString.indexOf(':');
            if (colonIndex === -1) {
                logger.warn('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ":" –≤ UTC –¥–∞—Ç–µ:', dateString);
                return new Date('Invalid Date');
            }
            
            const datePart = dateString.substring(colonIndex + 1);
            const year = datePart.substring(0, 4);
            const month = datePart.substring(4, 6);
            const day = datePart.substring(6, 8);
            const hour = datePart.substring(9, 11);
            const minute = datePart.substring(11, 13);
            const second = datePart.substring(13, 15);
            
            const dateStr = `${year}-${month}-${day}T${hour}:${minute}:${second}Z`;
            logger.verbose('üìÖ –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É (UTC):', dateStr);
            const result = new Date(dateStr);
            logger.verbose('üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (UTC):', result, 'Valid:', !isNaN(result.getTime()));
            return result;
        } else if (dateString.length >= 15 && dateString.includes('T')) {
            // –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: DTSTART:20250922T104500
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
            const colonIndex = dateString.indexOf(':');
            if (colonIndex === -1) {
                logger.warn('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ":" –≤ –ø—Ä–æ—Å—Ç–æ–π –¥–∞—Ç–µ:', dateString);
                return new Date('Invalid Date');
            }
            
            const datePart = dateString.substring(colonIndex + 1);
            const year = datePart.substring(0, 4);
            const month = datePart.substring(4, 6);
            const day = datePart.substring(6, 8);
            const hour = datePart.substring(9, 11);
            const minute = datePart.substring(11, 13);
            const second = datePart.substring(13, 15);
            
            const dateStr = `${year}-${month}-${day}T${hour}:${minute}:${second}+03:00`;
            logger.verbose('üìÖ –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É (–ø—Ä–æ—Å—Ç–æ–π):', dateStr);
            const result = new Date(dateStr);
            logger.verbose('üìÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø—Ä–æ—Å—Ç–æ–π):', result, 'Valid:', !isNaN(result.getTime()));
            return result;
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            logger.warn('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:', dateString);
            return new Date('Invalid Date');
        }
    }
    
    processCalendarEvents(events) {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);
        
        logger.info('üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', events.length);
        logger.info('üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', now.toLocaleString());
        logger.info('üìÖ –°–µ–≥–æ–¥–Ω—è:', today.toLocaleDateString());
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        const todayEvents = events.filter(event => {
            const eventDate = new Date(event.start);
            const isToday = eventDate >= today && eventDate < tomorrow;
            
            logger.verbose(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ "${event.summary}":`, {
                start: event.start.toLocaleString(),
                eventDate: eventDate.toLocaleString(),
                today: today.toLocaleString(),
                tomorrow: tomorrow.toLocaleString(),
                isToday: isToday
            });
            
            return isToday;
        });
        
        logger.info('üìÖ –°–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', todayEvents.length);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        todayEvents.forEach((event, index) => {
            logger.info(`üìÖ –°–æ–±—ã—Ç–∏–µ ${index + 1}:`, {
                summary: event.summary,
                start: event.start.toLocaleString(),
                end: event.end.toLocaleString(),
                isNow: event.start <= now && event.end > now,
                isFuture: event.start > now
            });
        });
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        todayEvents.sort((a, b) => a.start - b.start);
        
        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –≤—Å—Ç—Ä–µ—á—É
        this.currentMeeting = todayEvents.find(event => {
            const isCurrent = event.start <= now && event.end > now;
            return isCurrent;
        });
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â—É—é –≤—Å—Ç—Ä–µ—á—É
        this.nextMeeting = todayEvents.find(event => {
            const isFuture = event.start > now;
            return isFuture;
        });
        
        logger.info('‚úÖ –¢–µ–∫—É—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:', this.currentMeeting ? this.currentMeeting.summary : '–Ω–µ—Ç');
        logger.info('‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∞—è –≤—Å—Ç—Ä–µ—á–∞:', this.nextMeeting ? this.nextMeeting.summary : '–Ω–µ—Ç');
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
        if (todayEvents.length === 0) {
            logger.info('–ù–µ—Ç –≤—Å—Ç—Ä–µ—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏');
            this.hideBadge();
            this.updateEmployeeInfo();
            return;
        }
        
        logger.info('–ï—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂');
        this.updateDisplay();
    }
    
    updateDisplay() {
        this.hideLoader();
        // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –≤—Å—Ç—Ä–µ—á–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
        if (this.currentMeeting) {
            this.showBadge();
        } else {
            this.hideBadge();
        }
        this.updateTimers();
        this.updateEmployeeInfo();
    }
    
    updateEmployeeInfo() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (this.elements.positionBadge) {
            this.elements.positionBadge.textContent = window.CONFIG.EMPLOYEE_POSITION;
        }
        if (this.elements.nameBadge) {
            this.elements.nameBadge.textContent = window.CONFIG.EMPLOYEE_NAME;
        }
        if (this.elements.responsibilityAreas) {
            this.elements.responsibilityAreas.textContent = window.CONFIG.RESPONSIBILITY_AREAS;
        }
    }
    
    
    startTimer() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        this.updateInterval = setInterval(() => {
            this.updateTimers();
        }, window.CONFIG.TIMER_INTERVAL);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.calendarUpdateInterval = setInterval(() => {
            logger.debug('–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
            this.loadMeetings();
        }, window.CONFIG.CALENDAR_INTERVAL);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è OBS –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.obsRefreshInterval = setInterval(() => {
            logger.debug('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è OBS...');
            this.forceOBSRefresh();
        }, window.CONFIG.OBS_REFRESH_INTERVAL);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if (window.CONFIG.EMPLOYEE_INFO_AUTO_UPDATE) {
            this.employeeInfoUpdateInterval = setInterval(() => {
                logger.debug('–û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ...');
                this.updateEmployeeInfo();
            }, window.CONFIG.CALENDAR_INTERVAL);
        }
    }
    
    stopTimer() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
        if (this.calendarUpdateInterval) {
            clearInterval(this.calendarUpdateInterval);
            this.calendarUpdateInterval = null;
        }
        if (this.obsRefreshInterval) {
            clearInterval(this.obsRefreshInterval);
            this.obsRefreshInterval = null;
        }
        if (this.employeeInfoUpdateInterval) {
            clearInterval(this.employeeInfoUpdateInterval);
            this.employeeInfoUpdateInterval = null;
        }
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    refreshCalendar() {
        logger.info('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä (–æ–Ω —Å–∫—Ä–æ–µ—Ç –±–µ–π–¥–∂ –≤—Å—Ç—Ä–µ—á–∏)
        this.showLoader();
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        this.currentMeeting = null;
        this.nextMeeting = null;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å—Ä–∞–∑—É
        this.loadMeetings();
    }
    
    showLoader() {
        // –°–∫—Ä—ã–≤–∞–µ–º –±–µ–π–¥–∂ –≤—Å—Ç—Ä–µ—á–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        const meetingBadge = document.getElementById('meetingBadge');
        const loader = document.getElementById('loader');
        
        if (meetingBadge) {
            meetingBadge.style.display = 'none';
        }
        if (loader) {
            loader.style.display = 'flex';
            logger.info('üîÑ –õ–æ–∞–¥–µ—Ä –ø–æ–∫–∞–∑–∞–Ω');
        } else {
            logger.warn('‚ùå –õ–æ–∞–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }
    
    hideLoader() {
        // –°–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂ –≤—Å—Ç—Ä–µ—á–∏
        const meetingBadge = document.getElementById('meetingBadge');
        const loader = document.getElementById('loader');
        
        if (loader) {
            loader.style.display = 'none';
        }
        if (meetingBadge) {
            meetingBadge.style.display = 'flex';
        }
        logger.info('‚úÖ –õ–æ–∞–¥–µ—Ä —Å–∫—Ä—ã—Ç');
    }
    
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è OBS
    forceOBSRefresh() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        this.loadMeetings();
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        this.updateDisplay();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ DOM –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const badge = document.getElementById('meetingBadge');
        if (badge) {
            badge.style.transform = 'scale(1.001)';
            setTimeout(() => {
                badge.style.transform = 'scale(1)';
            }, 10);
        }
        
        logger.debug('OBS –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
    }
    
    updateTimers() {
        const now = new Date();
        
        if (this.currentMeeting) {
            const remaining = this.currentMeeting.end - now;
            const totalDuration = this.currentMeeting.end - this.currentMeeting.start;
            
            this.elements.meetingTitle.textContent = '–ö–æ–Ω–µ—Ü —á–µ—Ä–µ–∑';
            
            if (remaining > 0) {
                this.elements.currentTimer.textContent = this.formatTimeRemaining(remaining);
                this.elements.currentTimer.className = remaining < window.CONFIG.WARNING_TIME ? 'timer warning' : 'timer';
                this.updateFill(remaining, totalDuration);
            } else {
                const overdue = Math.abs(remaining);
                this.elements.currentTimer.textContent = '-' + this.formatTimeRemaining(overdue);
                this.elements.currentTimer.className = 'timer overdue';
                this.updateFill(0, totalDuration);
            }
        } else {
            this.elements.meetingTitle.textContent = 'Free-time';
            this.elements.currentTimer.textContent = 'Free-time';
            this.elements.currentTimer.className = 'timer';
            
            if (this.nextMeeting) {
                const timeToNext = this.nextMeeting.start - now;
                if (timeToNext > 0) {
                    this.elements.currentTimer.textContent = this.formatTimeRemaining(timeToNext);
                }
            }
            
            const meetingBadge = document.querySelector('.meeting-badge');
            if (meetingBadge) {
                meetingBadge.style.background = 'transparent';
            }
        }
        
        this.elements.nextCountdown.textContent = this.nextMeeting ? this.formatMoscowTime(this.nextMeeting.start) : '–Ω–µ—Ç';
    }
    
    updateFill(remaining, total) {
        const progress = Math.max(0, Math.min(1, remaining / total));
        const fillPercentage = (1 - progress) * 100;
        const meetingBadge = document.querySelector('.meeting-badge');
        
        if (meetingBadge) {
            if (progress === 0) {
                meetingBadge.style.background = '#0037C0';
            } else if (progress === 1) {
                meetingBadge.style.background = 'transparent';
            } else {
                const gradient = `linear-gradient(90deg, #0037C0 0%, #0037C0 ${fillPercentage}%, transparent ${fillPercentage}%, transparent 100%)`;
                meetingBadge.style.background = gradient;
            }
        }
    }
    
    formatMoscowTime(date) {
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
            timeZone: 'Europe/Moscow'
        });
    }
    
    formatTimeRemaining(milliseconds) {
        const totalSeconds = Math.floor(milliseconds / 1000);
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = totalSeconds % 60;
        
        const pad = (n) => n.toString().padStart(2, '0');
        return hours > 0 ? `${pad(hours)}:${pad(minutes)}:${pad(seconds)}` : `${pad(minutes)}:${pad(seconds)}`;
    }
    
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let meetingTimer;
document.addEventListener('DOMContentLoaded', () => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ OBS —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    const isOBS = detectOBSEnvironment();
    
    if (isOBS) {
        document.body.classList.add('obs-mode');
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ OBS
    function detectOBSEnvironment() {
        const urlCheck = window.location.href.includes('obs') || window.location.href.includes('obs-studio');
        const userAgentCheck = window.navigator.userAgent.includes('OBS') || window.navigator.userAgent.includes('obs-studio');
        const iframeCheck = window.parent !== window && (
            (window.frameElement && window.frameElement.id?.includes('obs')) ||
            (document.referrer && (document.referrer.includes('localhost') || document.referrer.includes('127.0.0.1')))
        );
        
        const checks = [urlCheck, userAgentCheck, iframeCheck];
        return checks.filter(check => check).length >= 2 && (userAgentCheck || iframeCheck);
    }

    meetingTimer = new MeetingTimer();
});

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (meetingTimer) {
        meetingTimer.stopTimer();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç OBS
window.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'refresh') {
        if (meetingTimer) {
            meetingTimer.refreshCalendar();
        }
    }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
document.addEventListener('keydown', (event) => {
    // F5 - –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if (event.key === 'F5') {
        event.preventDefault();
        if (meetingTimer) {
            meetingTimer.refreshCalendar();
        }
    }
    // Ctrl+R - –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    if (event.ctrlKey && event.key === 'r') {
        event.preventDefault();
        if (meetingTimer) {
            meetingTimer.refreshCalendar();
        }
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
window.refreshCalendar = () => {
    if (meetingTimer) {
        meetingTimer.refreshCalendar();
    }
};


window.forceOBSRefresh = () => {
    if (meetingTimer) {
        meetingTimer.forceOBSRefresh();
    }
};

